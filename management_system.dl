% Written by Theis Erik Jendal, tjenda15@student.aau.dk

% The maximum integer value in the programme to insure safety.
#maxint=10.

%%------------------------------
%% Extensional Part: Facts
%%------------------------------

%% Passengers. A passenger has an ID, firstname, lastname and DOB. I include ID to easily identify different passengers.
Passenger(0,"Joe", "Jakobsen", "07-27-1995").
Passenger(1,"Johnny", "Jakobsen", "09-09-1909").
Passenger(2,"John", "Jakobsen", "09-09-2000").

%% Passports. A passport is connected to a passenger ID and a country. It is therefore possible
%% for a passenger to have multiple passports. 
Passport(0, "Denmark").
Passport(1, "Britain").
Passport(2, "Denmark").
Passport(2, "United States of America").

%% Black lists. A cannot enter B in Blacklist(A,B).
BlackList("United States of America", "Britain").

%% Visas. A visa agreement from A to B. Meaning a person can fly from A to B in VisaAgreement(A,B).
VisaAgreement("Denmark", "Britain").
VisaAgreement("Britain", "Denmark").

%% A country is just a name.
Country("Denmark").
Country("United States of America").
Country("Britain").
Country("Hangry").

% Airlines. The legs they operate are implicit in the flight leg facts. 
Airline("SAS").
Airline("Norwegian").
Airline("NewAir").

%% Airports. IATA code, City, Country, Weather.
Airport("CPH", "Copenhagen", "Denmark", "Clear").
Airport("BLL", "Billund", "Denmark", "Windy").
Airport("AAR", "Aarhus", "Denmark", "Thunderstorm"). % Is closed do to bad weather.
Airport("AAL", "Aalborg", "Denmark", "Windy").
Airport("JFK", "New York City", "United States of America", "Cloudy").
Airport("LHR", "London", "Britain", "Clear").

%% Weather types
Weather("Clear").
Weather("Cloudy").
Weather("Windy").
Weather("Thunderstorm").

% Possible Seat columns, and their location. 
% A simplification here is that all planes have the same number of columns.
Column("A", "Window").
Column("B", "Aisle").
Column("C", "Aisle").
Column("D", "Window").

% Simplified when columns are adjacent. B and C are not adjacent as there is the aisle between them.
AdjacentColumns("A", "B").
AdjacentColumns("C", "D").

% Possible classes
Class("Business").
Class("Economy").

% The possible seat locations
SeatLocation("Window").
SeatLocation("Aisle").
SeatLocation("Other").

%% Aircrafts: Registration number, model, manufacturer, type, and max row number.
Aircraft("YY-JJO", "Airbus A380", "Airbus", "Heavy", 5).
Aircraft("OO-JJO", "Airbus A380", "Airbus", "Heavy", 5).
Aircraft("OY-JJO", "Airbus A380", "Airbus", "Heavy", 5).
Aircraft("OY-JJJ", "Airbus A380", "Airbus", "Heavy", 10).
Aircraft("OY-JOO", "Airbus A380", "Airbus", "Heavy", 2).


% Operate facts for light travel. The type and the allowed weather conditions.
OperatesIn("Light", "Clear").
OperatesIn("Light", "Cloudy").

%% Flight legs. ID, From, To and the service airline.
Leg(0, "CPH", "JFK", "SAS").
Leg(1, "JFK", "CPH", "SAS").
Leg(2, "AAL", "AAR", "SAS").
Leg(3, "CPH", "AAL", "Norwegian").
Leg(4, "AAL", "LHR", "Norwegian").

% The airline that operates the flight leg and the plane.
Operates(0, "SAS", "YY-JJO"). % Illegal reservation.
Operates(1, "SAS", "OO-JJO").
Operates(2, "SAS", "OY-JJO"). % Cannot take off due to bad weather.
Operates(3, "NewAir", "OY-JJJ").
Operates(4, "Norwegian", "OY-JOO").

% Reservation: Booking code, PassengerID, Row, Column, and leg ID.
Reservation("8V33EU", 1, 3, "C", 2). % Doublebooking.
Reservation("8V34EU", 2, 3, "C", 2).

Reservation("8V32EU", 0, 3, "B", 2).

Reservation("8V35EU", 1, 3, "D", 0). % Illegal reservation.

%%------------------------------
%% Intensional Part: Rules
%%------------------------------

% There is always a visa agreement between a country and itself.
VisaAgreement(A,A) :- 
    Country(A).

% A row is business if two or below to simplify airplane facts.
GetClass(Row, "Business") :-
    #int(Row),
    Row <= 2.

% Rows above 2 is economy class.
GetClass(Row, "Economy") :-
    #int(Row),
    Row > 2.

% Derives all possible seats.
Seat(Aircraft, Row, Column, Location) :-
    Aircraft(Aircraft, _, _, _, MaxRow),
    Column(Column, Location),
    SeatLocation(Location),

    #int(Row),
    Row <= MaxRow,
    Row != 0.

% Adjacent sets for an airline.
AdjacentSeat(Airline, Row, Col1, Row, Col2) :-
    Seat(Airline, Row, Col1, Loc1),
    Seat(Airline, Row, Col2, Loc2),
    AdjacentColumn(Col1, Col2).

% Heavy operates in all weather conditions except Thunderstorm.
OperatesIn("Heavy", Weather) :-
    Weather(Weather),
    Weather != "Thunderstorm". % All equality operators in DLV satisfy safety conditions.

%%------------------------------
%% Problem solutions
%%------------------------------

% Solution to problem 3.
% A passenger can fly to any destination, if it is a passenger and has a passport with a VisaAgreemnt to the country.
MayFlyTo(PassengerID, IATA) :-
    Passenger(PassengerID, _, _, _),
    Passport(PassengerID, FromCountry),
    VisaAgreement(FromCountry, ToCountry),
    Airport(IATA, _, ToCountry, _).

% Solution to problem 4.
% A reservation is illegal if there is a reservation, it is a valid leg ID and the passenger is not allowed to fly to the location. 
IllegalReservation(ReservationID) :-
    Reservation(ReservationID, PassengerID, _, _, LegID),
    Leg(LegID, _, To, _),
    not MayFlyTo(PassengerID, To).

% Solution to problem 5.
% A double booking occur when two different reservations have the same
% row, column and leg ID.
DoubleBooking(ReservationID1) :-
    Reservation(ReservationID1, _, Row, Column, LegID),
    Reservation(ReservationID2, _, Row, Column, LegID),
    Leg(LegID, _, _, _),
    ReservationID1 != ReservationID2.

% Solution to problem 6.
% An aircraft can take off if the if it is safe for it to take off, land,
% and there are no booking errors.
CanTakeOff(RegistrationNumber) :-
    Leg(LegID, From, To, Airline),
    Operates(LegID, _, RegistrationNumber),
    
    SafeWeather(From, RegistrationNumber),
    SafeWeather(To, RegistrationNumber),

    not BookingError(LegID).

% There is a booking error if there is a double booking or there is an illegal reservation.
% Having Booking error as its own rule means aircrafts with no passengers are allowed to take off.
BookingError(LegID) :-
    Reservation(ReservationID, _, _, _, LegID), 
    DoubleBooking(ReservationID).           

BookingError(LegID) :-
    Reservation(ReservationID, _, _, _, LegID), 
    IllegalReservation(ReservationID).       

% The weather is safe if the aircraft can fly in the weather at the airport.
SafeWeather(Airport, RegistrationNumber) :-
    Aircraft(RegistrationNumber, _, _, Type, _),
    Airport(Airport, _, _, Weather),
    OperatesIn(Type, Weather).

% Solution to problen 7.
% An airport is closed if none of the traffic to and from the airport can take off
% do to bad weather.
IsClosed(Airport) :-
    Traffic(Airport, RegistrationNumber),
    not SafeWeather(Airport, RegistrationNumber).

% Traffic is the aircrafts to and from an airport.
Traffic(Airport, RegistrationNumber) :- 
    Leg(LegID, Airport, _, _),
    Operates(LegID, _, RegistrationNumber).

Traffic(Airport, RegistrationNumber) :- 
    Leg(LegID, _, Airport, _),
    Operates(LegID, _, RegistrationNumber).


% Solution to problem 8.
% Can book a fly to some airport if there is a flight leg between the airports,
% the passenger is allowed to fly to the destination, and there is a free seat.
% If a passenger is in a country they cannot fly to, they can still fly somewhere else.
% Adding a the MayFlyTo predicate with the variable From, would remove this possibility.
CanBookFlightTo(PassengerID, From, To) :-
    Leg(LegID, From, To, _),
    Operates(LegID, _, RegistrationNumber),
    MayFlyTo(PassengerID, To),
    FreeSeat(LegID).

% Or if there there already is a flight from A, B and a leg from B to C, and the passenger is allowed to fly to C.
% then A to C is an allowed flight.
CanBookFlightTo(PassengerID, From, To) :-
    CanBookFlightTo(PassengerID, From, Stop),
    Leg(LegID, Stop, To, _),
    Operates(LegID, _, RegistrationNumber),
    MayFlyTo(PassengerID, To),
    FreeSeat(LegID).

% Is a free seat if there is a leg, where the plane that operates it, has a seat that is not booked.
FreeSeat(LegID) :- 
    Leg(LegID, From, To, _),
    Operates(LegID, _, RegistrationNumber),
    Seat(RegistrationNumber, Row, Column, _),
    not BookedSeat(Row, Column, LegID).

% Is used to insure safety, as there are no facts about reservation ID's that could be used
% with purpose, in the FreeSeat rule, as all variables in a negated atom should be used another place in the body of the rule.
BookedSeat(Row, Column, LegID) :-
    Reservation(_, _, Row, Column, LegID).

% Solution to problem 9.
% A dual citizen may flyt to an aiport if they as a non dual citizen are allowed to travel to the airport
% and they are not blacklisted from the airport.
DualCitizenMayFlyTo(PassengerID, IATA) :-
    MayFlyTo(PassengerID, IATA),
    not BlackListedAirport(PassengerID, IATA).

% Is a rule that derive all airports a passenger cannot enter because of a blacklisting. 
BlackListedAirport(PassengerID, IATA) :-
    Passport(PassengerID, Country),
    BlackList(Country, C),
    Airport(IATA, _, C, _).